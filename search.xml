<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android多渠道打包加固方案</title>
    <url>/2020/09/01/Android%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85%E5%8A%A0%E5%9B%BA%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>进过筛选对比，决定采用美团的walle多渠道打包方案，好处如下，美团方案对代码的侵入比较小，可以使用v2签名，节省大量重复打包的时间，加固采用360加固的解决方案。<br>但是加固后损失了渠道信息并且360进行的重签为v1版本，因此需要我们手动调整项目流程为<br><em>加固–&gt;重新签名–&gt;多渠道打包</em></p>
<a id="more"></a>


<h3 id="walle的集成"><a href="#walle的集成" class="headerlink" title="walle的集成"></a>walle的集成</h3><p>以下为集成概要，详情请参考项目主页<a href="https://github.com/Meituan-Dianping/walle">Meituan-Dianping/walle</a></p>
<h4 id="配置build-gradle"><a href="#配置build-gradle" class="headerlink" title="配置build.gradle"></a>配置build.gradle</h4><p>在项目根路径下配置walle gradle插件依赖</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.meituan.android.walle:plugin:1.1.6&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在当前APP的build.gradle中应用这个插件，并添加上用于处理渠道信息对应的引用库文件。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;walle&#x27;</span></span><br><span class="line">... ...</span><br><span class="line">android&#123;</span><br><span class="line">  ... ...</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;com.meituan.android.walle:library:1.1.6&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在需要渠道等信息时可以通过下面代码进行获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String channel = WalleChannelReader.getChannel(<span class="keyword">this</span>.getApplicationContext());</span><br></pre></td></tr></table></figure>

<h4 id="加固"><a href="#加固" class="headerlink" title="加固"></a>加固</h4><p>浏览了360加固官网，整个加固过程其实很简单，主要有以下的三个步骤：</p>
<ul>
<li>输入360加固平台的帐号、密码</li>
<li>将签名文件上传到加固平台</li>
<li>上传需要加固的apk文件进行加固</li>
</ul>
<p>通过gradle脚本实现加固方案</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> reinforceApk(File apk, outputPath) &#123;</span><br><span class="line">    println <span class="string">&quot;--- 360 reinforceApk start! ---&quot;</span></span><br><span class="line">    println <span class="string">&quot;reinforce apk:&quot;</span> + apk</span><br><span class="line">    <span class="keyword">if</span> (apk == <span class="literal">null</span> || !apk.exists()) &#123;</span><br><span class="line">        println <span class="string">&quot;---360 reinforceApk throw exception and forced stop!---&quot;</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&#x27;apk is not exists and cannot reinforce&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">def</span> file = <span class="keyword">new</span> File(outputPath)</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        file.mkdir()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println <span class="string">&quot;加固账号：$&#123;REINFORCE_NAME&#125;&quot;</span></span><br><span class="line">    println <span class="string">&quot;加固密码  $&#123;REINFORCE_PASSWORD&#125;&quot;</span></span><br><span class="line">    println <span class="string">&quot;360加固账号登录&quot;</span></span><br><span class="line">    exec &#123;</span><br><span class="line">        commandLine getCommand(), <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java -jar $&#123;REINFORCE_JAR&#125; -login  $&#123;REINFORCE_NAME&#125; $&#123;REINFORCE_PASSWORD&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println <span class="string">&quot;360加固中&quot;</span></span><br><span class="line">    exec&#123;</span><br><span class="line">        commandLine getCommand(), <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java -jar $&#123;REINFORCE_JAR&#125; -jiagu $&#123;apk&#125; $&#123;outputPath&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println <span class="string">&quot;--- 360 reinforce end! ---&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="重签名"><a href="#重签名" class="headerlink" title="重签名"></a>重签名</h4><p>​ 加固完成后,对加固apk进行重签名;</p>
<p>​ 使用AndroidSDK中的build-tools目录下, 使用压缩对齐工具和签名工具完成重签名, 步骤如下:</p>
<p>对齐，对Apk文件进行存档对齐优化，确保所有的未压缩数据都从文件的开始位置以指定的对齐方式排列签名，选择Signature V2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">commandLine &quot;&#123;命令执行符号&#125;&quot;,&quot;-c&quot;, &quot;&#123;zipalign工具的文件路径&#125; -v -p 4  &#123;已加固的apk文件路径&#125; &#123;对齐后输出的apk文件路径&#125;&quot;</span><br><span class="line">commandLine &quot;&#123;命令执行符号&#125;&quot;, &quot;-c&quot;, &quot;&#123;apksigner工具的文件路径&#125; sign --ks &#123;签名文件的位置&#125; --ks-key-alias &#123;alias别名&#125; --ks-pass pass:&#123;签名文件存储的密码&#125; --key-pass pass:&#123;alias密码&#125; --out &#123;签名后输出的apk文件&#125; &#123;对齐后输出的apk文件路径&#125;&quot;</span><br></pre></td></tr></table></figure>
<h4 id="多渠道打包"><a href="#多渠道打包" class="headerlink" title="多渠道打包"></a>多渠道打包</h4><p>​签名完成后, 使用walle进行多渠道打包平时使用walle多渠道打包，只需要在app/build.gradle下配置插件，指定渠道包的输出路径和渠道配置文件即 可，最后在Android studio的Terminal中输入./gradlew assembleReleaseChannels，任务执行完成后在指定的 输出路径下生成多个对应的渠道包。具体的流程和细节可参考官方介绍。</p>
<p>​ 这种多渠道打包方式是全自动化构建，很难去干涉到构建流程，不符合我们的需求</p>
<p>在app/build.gradle配置插件时，在官方介绍中并没有找到指定源APK输入路径的方式，估计打包插件默认使用的是app/build/outputs/apk/release下的apk文件，这样就没办法对不同文件路径下的已加固apk包进行多渠道打包。</p>
<p>打包任务设置在assembleRelease之后执行，这个执行依赖封装在插件内部，外部很难修改打包任务依赖于加固任务，在加固任务之后执行。</p>
<p>除了上面的多渠道打包方式之后，walle还提供了另外一种多渠道打包方式，用命令行执行walle提供的walle-cli-all.jar执行打包操作，只需要一条打包命令即可完成打包。</p>
<p>commandLine “sh”, “-c”, “java -jar {walle-cli-all.jar文件路径} batch -f {渠道文件路径} {要加渠道的apk文件路径} {渠道包的输出路径}”<br>walle-cli-all.jar文件下载地址：官方:walle-cli-all.jar, 其他开发提供的编译版本</p>
<p>这里为什么会有两个版本呢! 因为发现了一个比较坑的地方官方的版本打完包会发现在系统9.0（P）下无法正常安装, 相关问题可以查看Issue, 当然你也可以自己拉取源码编译</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android自动化打包脚本</title>
    <url>/2020/09/02/Android/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p> 具体代码如下：</p>
<a id="more"></a>

<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//env.PROJ_DIR=&#x27;src/learningGo&#x27;</span></span><br><span class="line"><span class="keyword">def</span> VERSIONNAME</span><br><span class="line"><span class="keyword">def</span> VERSIONCODE</span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    <span class="comment">// 定义pipeline或者plugin的参数设置。</span></span><br><span class="line">    <span class="comment">//配置gradle版本</span></span><br><span class="line">    tools &#123;</span><br><span class="line">            gradle <span class="string">&quot;gradle-5.4.1&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    options &#123;</span><br><span class="line">        <span class="comment">// 一时间最多只允许一个pipeline运行，如果前面的仍在运行， 后面的将会等待状态。</span></span><br><span class="line">        disableConcurrentBuilds()</span><br><span class="line">        <span class="comment">// 失败了，重试一次。</span></span><br><span class="line">        retry(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 如果某个stage为unstable状态，则忽略后面的任务，直接退出。</span></span><br><span class="line">        skipStagesAfterUnstable()</span><br><span class="line">        <span class="comment">// 40分钟的超时设置。</span></span><br><span class="line">        timeout(<span class="attr">time:</span> <span class="number">40</span>, <span class="attr">unit:</span> <span class="string">&#x27;MINUTES&#x27;</span>)</span><br><span class="line">        <span class="comment">// 输出颜色控制</span></span><br><span class="line">        ansiColor(<span class="string">&#x27;xterm&#x27;</span>)</span><br><span class="line">        <span class="comment">// 保持构建的最大个数</span></span><br><span class="line">        buildDiscarder(logRotator(<span class="attr">numToKeepStr:</span> <span class="string">&#x27;30&#x27;</span>))</span><br><span class="line">        <span class="comment">// 忽略默认检出代码过程</span></span><br><span class="line">        skipDefaultCheckout <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义公用的环境变量</span></span><br><span class="line">     parameters &#123;</span><br><span class="line">        choice(<span class="attr">name:</span> <span class="string">&#x27;EnvironMent_Deploy&#x27;</span>, <span class="attr">choices:</span> <span class="string">&#x27;TEST\nONLINE\nPREPARE&#x27;</span>, <span class="attr">description:</span> <span class="string">&#x27;测试环境TEST正式环境ONLINE预发布环境PREPARE&#x27;</span>)</span><br><span class="line">        choice(<span class="attr">name:</span> <span class="string">&#x27;BUILDTASK&#x27;</span>, <span class="attr">choices:</span> <span class="string">&#x27;单渠道打包\n多渠道打包&#x27;</span>, <span class="attr">description:</span> <span class="string">&#x27;单渠道打包or多渠道打包&#x27;</span>)</span><br><span class="line">     &#125;  </span><br><span class="line">    environment &#123;</span><br><span class="line">      <span class="keyword">def</span> sonarqubeScannerHome = tool <span class="attr">name:</span> <span class="string">&#x27;sonar-scanner-4.4&#x27;</span></span><br><span class="line">      NUMBER = <span class="string">&quot;$&#123;env.BUILD_NUMBER&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;检出代码&#x27;</span>) &#123;</span><br><span class="line">          steps &#123;</span><br><span class="line">                checkout scm</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;清理工程&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                ./gradlew clean</span></span><br><span class="line"><span class="string">                &#x27;&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;代码检查&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;./gradlew lint&#x27;</span></span><br><span class="line">                step([<span class="attr">$class:</span> <span class="string">&#x27;LintPublisher&#x27;</span>, <span class="attr">pattern:</span> <span class="string">&#x27;app/build/reports/lint-results*.xml&#x27;</span>])</span><br><span class="line">                withSonarQubeEnv(<span class="string">&#x27;sonarqube&#x27;</span>) &#123;</span><br><span class="line">                    sh <span class="string">&quot;$&#123;sonarqubeScannerHome&#125;/bin/sonar-scanner -X &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.login=admin &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.password=QB-XwcVyohvdjj7GEQntymCC &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.projectKey=android-jenkins &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.projectName=android-jenkins &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dssonar.projectVersion=1.$&#123;NUMBER&#125; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.language=java &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.sources=. &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.java.binaries=. &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.exclusions=**/build/**/*.*  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-Dsonar.sourceEncoding=UTF-8 &quot;</span> </span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;编译构建&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               sh <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                if [ &quot;$&#123;BUILDTASK&#125;&quot; == &#x27;单渠道打包&#x27; ];then</span></span><br><span class="line"><span class="string">                    ./gradlew app:assembleRelease</span></span><br><span class="line"><span class="string">                fi</span></span><br><span class="line"><span class="string">                if [ &quot;$&#123;BUILDTASK&#125;&quot; == &#x27;多渠道打包&#x27; ];then</span></span><br><span class="line"><span class="string">                    ./gradlew app:assembleReinforceRelease</span></span><br><span class="line"><span class="string">                fi</span></span><br><span class="line"><span class="string">               &#x27;&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;打包归档&#x27;</span>) &#123;</span><br><span class="line">             steps &#123;</span><br><span class="line">               sh <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                if [ &quot;$&#123;BUILDTASK&#125;&quot; == &#x27;多渠道打包&#x27; ];then</span></span><br><span class="line"><span class="string">                    savePath=&quot;/data/packages/apk&quot;</span></span><br><span class="line"><span class="string">                    localPath=&quot;app/build/outputs/&quot;</span></span><br><span class="line"><span class="string">                    folderName=&quot;channels&quot;</span></span><br><span class="line"><span class="string">                    folderPath=&quot;$&#123;localPath&#125;$&#123;folderName&#125;&quot;</span></span><br><span class="line"><span class="string">                    echo $folderPath</span></span><br><span class="line"><span class="string">                    currentTime=`date +%Y年%m月%d日%H时%M分`</span></span><br><span class="line"><span class="string">                    ls -l</span></span><br><span class="line"><span class="string">                    if [ 0 -eq `ls $folderPath | wc -w` ] ;then</span></span><br><span class="line"><span class="string">                        exit 2000</span></span><br><span class="line"><span class="string">                    fi</span></span><br><span class="line"><span class="string">                    echo $savePath</span></span><br><span class="line"><span class="string">                    cp -a $folderPath $savePath</span></span><br><span class="line"><span class="string">                    cd $savePath</span></span><br><span class="line"><span class="string">                    ls -l</span></span><br><span class="line"><span class="string">                    mv $folderName $currentTime</span></span><br><span class="line"><span class="string">                    //远端存储</span></span><br><span class="line"><span class="string">                    scp -r ..</span></span><br><span class="line"><span class="string">                elif [ &quot;$&#123;BUILDTASK&#125;&quot; == &#x27;单渠道打包&#x27; ];then</span></span><br><span class="line"><span class="string">                    </span></span><br><span class="line"><span class="string">                         apkPath=&quot;app/build/outputs/apk/release/&quot;</span></span><br><span class="line"><span class="string">                                </span></span><br><span class="line"><span class="string">                find $apkPath -name &quot;*.apk&quot; | while read path</span></span><br><span class="line"><span class="string">                do </span></span><br><span class="line"><span class="string">                    //fir-token</span></span><br><span class="line"><span class="string">                    fir_token=&quot;？？？&quot;</span></span><br><span class="line"><span class="string">                    fir publish $path --token=$&#123;fir_token&#125;</span></span><br><span class="line"><span class="string">                done</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">               &#x27;&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;钉钉通知&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                /bin/bash</span></span><br><span class="line"><span class="string">                export LANG=en_US.UTF-8</span></span><br><span class="line"><span class="string">                 VERSIONCODE=$(cat config.gradle | grep versionCode|awk -F: &#x27;&#123;print $2&#125;&#x27;|awk -F, &#x27;&#123;print $1&#125;&#x27;)</span></span><br><span class="line"><span class="string">                 VERSIONNAME=$(cat config.gradle | grep versionName|awk -F: &#x27;&#123;print $2&#125;&#x27;|awk -F, &#x27;&#123;print $1&#125;&#x27;)</span></span><br><span class="line"><span class="string">                appVersion=`echo $VERSIONNAME|sed &#x27;s/\&quot;//g&#x27;`</span></span><br><span class="line"><span class="string">                appVersionCode=$VERSIONCODE</span></span><br><span class="line"><span class="string">                appBundleId=&quot;&quot;</span></span><br><span class="line"><span class="string">                platform=&quot;Android&quot;</span></span><br><span class="line"><span class="string">                ReleaseNotes=&quot;自动打包&quot;</span></span><br><span class="line"><span class="string">                //钉钉token</span></span><br><span class="line"><span class="string">                accessToken=&quot;??&quot;</span></span><br><span class="line"><span class="string">                downloadUrl=&quot;https://apk.mocaapp.cn/&quot;</span></span><br><span class="line"><span class="string">                if [ &quot;$&#123;BUILDTASK&#125;&quot; == &#x27;单渠道打包&#x27; ];then</span></span><br><span class="line"><span class="string">                    downloadUrl=&quot;http://fir.mocaapp.cn/7vd6&quot;</span></span><br><span class="line"><span class="string">                fi</span></span><br><span class="line"><span class="string">                url=&quot;https://oapi.dingtalk.com/robot/send?access_token=$accessToken&quot;</span></span><br><span class="line"><span class="string">                header=&quot;Content-Type: application/json&quot;</span></span><br><span class="line"><span class="string">                title=&quot;$APPNAME($platform)更新&quot;</span></span><br><span class="line"><span class="string">                text=&quot;[$APPNAME($platform)更新]($downloadUrl)\\n ![$APPNAME]($ICON_URL)\\n 链接:[$downloadUrl]($downloadUrl)\n 版本: $appVersion (Build: $appVersionCode)\n 更新内容: $ReleaseNotes\n&quot;</span></span><br><span class="line"><span class="string">                rawData=&quot;&#123;\\&quot;msgtype\\&quot;:\\&quot;actionCard\\&quot;, \\&quot;actionCard\\&quot;: &#123; \\&quot;title\\&quot;: \\&quot;$&#123;title&#125;\\&quot;, \\&quot;text\\&quot;: \\&quot;$&#123;text&#125;\\&quot;, \\&quot;hideAvatar\\&quot;: \\&quot;0\\&quot;, \\&quot;btnOrientation\\&quot;: \\&quot;0\\&quot;, \\&quot;singleTitle\\&quot;: \\&quot;\\&quot; &#125;&#125;&quot;</span></span><br><span class="line"><span class="string">                res=`curl --request POST &quot;$url&quot; -H &quot;$header&quot; --data &quot;$rawData&quot;`</span></span><br><span class="line"><span class="string">                if [ $&#123;#res&#125; != 27 ];then</span></span><br><span class="line"><span class="string">                  exit 1002</span></span><br><span class="line"><span class="string">                fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                &#x27;&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>mac常用软件及安装</title>
    <url>/2020/09/14/others/mac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%8F%8A%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<a id="more"></a>

<h4 id="Mac常用软件"><a href="#Mac常用软件" class="headerlink" title="Mac常用软件"></a>Mac常用软件</h4><p>网盘链接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">链接: https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1kzpfZ0-GK2pr1uFs_MyDLw</span><br><span class="line">密码: taei</span><br></pre></td></tr></table></figure>
<p>包含，搜狗输入法，androidstudio，百度网盘，clashxr,cleanMyMac4.6,微信，chrome，sublime Text等软件。</p>
<h4 id="常用工具安装"><a href="#常用工具安装" class="headerlink" title="常用工具安装"></a>常用工具安装</h4><p>1、iTerm2的安装及配置</p>
<blockquote>
<p><a href="https://rencheng.cc/2016/08/16/tools/macos/Iterm2%E9%85%8D%E7%BD%AE/?highlight=iterm2e">https://rencheng.cc/2016/08/16/tools/macos/Iterm2%E9%85%8D%E7%BD%AE/?highlight=iterm2e</a></p>
</blockquote>
<p>2、Homebrew的安装及配置</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/111014448">https://zhuanlan.zhihu.com/p/111014448</a></p>
</blockquote>
<p>安装脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>卸载脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p> 3、MWeb破解版下载</p>
<blockquote>
<p><a href="https://www.macwk.com/soft/mweb">https://www.macwk.com/soft/mweb</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Others</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin数组与集合的操作符</title>
    <url>/2020/09/01/Kotin/Kotin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<p>Kotlin 中，还为我们提供了许多使数组与集合操作起来更加方便的函数,以下面的集合和数组为例说明。</p>
<a id="more"></a>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> intArray = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">val</span> strList = listOf(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="forEach（遍历）"><a href="#forEach（遍历）" class="headerlink" title="forEach（遍历）"></a>forEach（遍历）</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//              👇 lambda 表达式，i 表示数组的每个元素</span></span><br><span class="line">intArray.forEach &#123; i -&gt;</span><br><span class="line">    print(i + <span class="string">&quot; &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：1 2 3   </span></span><br></pre></td></tr></table></figure>

<p>foreach表示遍历数组或者集合中的每一个元素，其中的i指代具体的元素</p>
<h4 id="filter（过滤）"><a href="#filter（过滤）" class="headerlink" title="filter（过滤）"></a>filter（过滤）</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line">      ⬇️</span><br><span class="line"><span class="comment">//  &#123;2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            👇 注意，这里变成了 List</span></span><br><span class="line"><span class="keyword">val</span> newList: List = intArray.filter &#123; i -&gt;</span><br><span class="line">    i != <span class="number">1</span> <span class="comment">// 👈 过滤掉数组中等于 1 的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>filter表示对每个元素进行过滤操作，如果lambda表达式中的条件成立则留下元素，否则剔除，最终生成新的集合。</p>
<h4 id="map-遍历生成新的集合"><a href="#map-遍历生成新的集合" class="headerlink" title="map(遍历生成新的集合)"></a>map(遍历生成新的集合)</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  [1, 2, 3]</span></span><br><span class="line">       ⬇️</span><br><span class="line"><span class="comment">//  &#123;2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> newList: List = intArray.map &#123; i -&gt;</span><br><span class="line">    i + <span class="number">1</span> <span class="comment">// 👈 每个元素加 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>map会遍历每个元素，并执行指定表达式，最终形成新的集合。</p>
<h4 id="flatmap（数组降维打平）"><a href="#flatmap（数组降维打平）" class="headerlink" title="flatmap（数组降维打平）"></a>flatmap（数组降维打平）</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//          [1, 2, 3]</span></span><br><span class="line">               ⬇️</span><br><span class="line"><span class="comment">// &#123;&quot;2&quot;, &quot;a&quot; , &quot;3&quot;, &quot;a&quot;, &quot;4&quot;, &quot;a&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">intArray.flatMap &#123; i -&gt;</span><br><span class="line">    listOf(<span class="string">&quot;<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="comment">// 👈 生成新集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
</search>
